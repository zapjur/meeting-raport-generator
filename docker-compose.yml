version: "3.9"

services:
  mongodb:
    build:
      context: ./src/mongodb
      dockerfile: Dockerfile
    container_name: mongodb
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_DATABASE: database
      MONGO_INITDB_ROOT_USERNAME: admin
      MONGO_INITDB_ROOT_PASSWORD: password
    volumes:
      - ./mongo-data:/data/db
      - ./transcriptions.json:/docker-entrypoint-initdb.d/transcriptions.json

  rabbitmq:
    image: rabbitmq:management
    container_name: rabbitmq
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
      RABBITMQ_HEARTBEAT: 900

  redis:
    image: redis
    container_name: redis
    ports:
      - "6379:6379"

  logger-service:
    build:
      context: ./src/logger-service
      dockerfile: Dockerfile
    container_name: logger-service
    depends_on:
      - mongodb
      - rabbitmq
      - orchestrator-service

  orchestrator-service:
    build:
      context: ./src/orchestrator-service
      dockerfile: Dockerfile
    container_name: orchestrator-service
    depends_on:
      - mongodb
      - rabbitmq
    ports:
      - "8080:8080"
    volumes:
      - shared-data-transcription:/shared-transcription
      - shared-data-ocr:/shared-ocr
      - shared-data-report:/shared-report

  summary-service:
    build:
      context: ./src/summary-service
      dockerfile: Dockerfile
    container_name: summary-service
    depends_on:
      - mongodb
      - rabbitmq
      - orchestrator-service
    environment:
      - GROQ_API_KEY=${GROQ_API_KEY}

  client-service:
    build:
      context: ./src/client
      dockerfile: Dockerfile
    container_name: client
    ports:
      - "3000:80"
    depends_on:
      - orchestrator-service

  transcription-service:
    build:
      context: ./src/transcription-service
      dockerfile: Dockerfile
    container_name: transcription-service
    depends_on:
      - mongodb
      - rabbitmq
      - orchestrator-service
    environment:
      - HF_TOKEN=${HF_TOKEN}
    volumes:
      - shared-data-transcription:/shared-transcription

  ocr-service:
    build:
      context: ./src/ocr-service
      dockerfile: Dockerfile
    container_name: ocr-service
    depends_on:
      - mongodb
      - rabbitmq
      - orchestrator-service
    environment:
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - shared-data-ocr:/shared-ocr

  report-service:
    build:
      context: ./src/report-service
      dockerfile: Dockerfile
    container_name: report-service
    depends_on:
      - mongodb
      - rabbitmq
      - orchestrator-service
    volumes:
      - shared-data-ocr:/shared-ocr
      - shared-data-report:/shared-report
  email-service:
    build:
      context: ./src/email-service
      dockerfile: Dockerfile
    container_name: email-service
    environment:
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
    depends_on:
      - rabbitmq
      - orchestrator-service
    volumes:
      - shared-data-report:/shared-report

volumes:
  shared-data-transcription:
  shared-data-ocr:
  shared-data-report:
